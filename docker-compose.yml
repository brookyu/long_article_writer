version: '3.8'

services:
  # Using existing MySQL container - mysql-container
  # Note: Existing MySQL container is already running on host:3306

  # Milvus Vector Database
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - law_network
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - minio_data:/data
    command: minio server /data --console-address ":9001"
    networks:
      - law_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.3.3
    command: ["milvus", "run", "standalone"]
    security_opt:
    - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - law_network

  # Using existing local Ollama installation
  # Note: Ollama is already running on host:11434 with models: gpt-oss:20b, mixtral:latest

  # SearXNG Search Engine (Optional)
  searxng:
    container_name: law_searxng
    image: searxng/searxng:latest
    ports:
      - "8080:8080"
    volumes:
      - ./searxng-config:/etc/searxng
    environment:
      - SEARXNG_BASE_URL=http://localhost:8080/
    networks:
      - law_network
    restart: unless-stopped

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: law_backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=mysql://root:${MYSQL_ROOT_PASSWORD:-password}@host.docker.internal:3306/long_article_writer
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - OLLAMA_HOST=host.docker.internal
      - OLLAMA_PORT=11434
      - SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./exports:/app/exports
    depends_on:
      milvus:
        condition: service_healthy
    networks:
      - law_network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: law_frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_SENTRY_DSN=${SENTRY_DSN:-}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - law_network
    restart: unless-stopped

volumes:
  etcd_data:
  minio_data:
  milvus_data:

networks:
  law_network:
    driver: bridge